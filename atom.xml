<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ChenBin&#39;s Blog</title>
  
  <subtitle>🎉✨🎨🚀🐳</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.chenb.top/"/>
  <updated>2024-09-23T07:13:38.190Z</updated>
  <id>https://www.chenb.top/</id>
  
  <author>
    <name>Chen Bin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>linux安装SSR</title>
    <link href="https://www.chenb.top/2024/09/20/install-ssr/"/>
    <id>https://www.chenb.top/2024/09/20/install-ssr/</id>
    <published>2024-09-20T06:29:03.000Z</published>
    <updated>2024-09-23T07:13:38.190Z</updated>
    
    <content type="html"><![CDATA[<h3 id="脚本代码"><a href="#脚本代码" class="headerlink" title="脚本代码"></a>脚本代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</span><br><span class="line"><span class="comment"># 1 - 10 2 - - - - - -</span></span><br><span class="line"></span><br><span class="line">wget -N --no-check-certificate <span class="string">&quot;https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh&quot;</span></span><br><span class="line">chmod +x tcp.sh</span><br><span class="line">./tcp.sh</span><br><span class="line"><span class="comment"># 1 y 6</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;脚本代码&quot;&gt;&lt;a href=&quot;#脚本代码&quot; class=&quot;headerlink&quot; title=&quot;脚本代码&quot;&gt;&lt;/a&gt;脚本代码&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>docker部署appium服务器</title>
    <link href="https://www.chenb.top/2024/09/20/docker-appium/"/>
    <id>https://www.chenb.top/2024/09/20/docker-appium/</id>
    <published>2024-09-20T06:10:36.000Z</published>
    <updated>2024-09-20T06:28:27.772Z</updated>
    
    <content type="html"><![CDATA[<h3 id="脚本代码"><a href="#脚本代码" class="headerlink" title="脚本代码"></a>脚本代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">-d \</span><br><span class="line">-v /usr/src/key:/root/.android \</span><br><span class="line">-p 4723:4723 \</span><br><span class="line">-e REMOTE_ADB=<span class="literal">true</span> \</span><br><span class="line">-e ANDROID_DEVICES=116.62.65.226:1000,116.62.65.226:1002 \</span><br><span class="line">-e REMOTE_ADB_POLLING_SEC=60 \</span><br><span class="line">-e APPIUM_ADDITIONAL_PARAMS=<span class="string">&quot;--ssl-cert-path=/root/.android/cert.pem --ssl-key-path=/root/.android/key.pem&quot;</span> \</span><br><span class="line">--name appium \</span><br><span class="line">appium/appium</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      docker部署appium服务器
    
    </summary>
    
      <category term="技术总结" scheme="https://www.chenb.top/categories/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Shell" scheme="https://www.chenb.top/tags/Shell/"/>
    
      <category term="Docker" scheme="https://www.chenb.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>WindowsServer自动下载并安装软件的脚本</title>
    <link href="https://www.chenb.top/2023/05/31/windows-server-deploy/"/>
    <id>https://www.chenb.top/2023/05/31/windows-server-deploy/</id>
    <published>2023-05-31T03:11:38.000Z</published>
    <updated>2023-08-02T07:37:41.175Z</updated>
    
    <content type="html"><![CDATA[<h3 id="脚本代码"><a href="#脚本代码" class="headerlink" title="脚本代码"></a>脚本代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">echo</span> 开始下载应用程序...</span><br><span class="line">bitsadmin /transfer n https://geshui-data.oss-cn-hangzhou.aliyuncs.com/hf-rpa-setup.exe c:\1.exe</span><br><span class="line"><span class="built_in">echo</span> 开始安装应用程序...</span><br><span class="line">start /<span class="built_in">wait</span> c:\1.exe /silent</span><br><span class="line"><span class="built_in">echo</span> 安装完成</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 开始下载应用程序...</span><br><span class="line">bitsadmin /transfer n https://geshui-data.oss-cn-hangzhou.aliyuncs.com/vcredist_x86.exe c:\2.exe</span><br><span class="line"><span class="built_in">echo</span> 开始安装应用程序...</span><br><span class="line">start /<span class="built_in">wait</span> c:\2.exe /silent</span><br><span class="line"><span class="built_in">echo</span> 安装完成</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      WindowsServer自动下载并安装软件的脚本
    
    </summary>
    
      <category term="技术总结" scheme="https://www.chenb.top/categories/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Windows" scheme="https://www.chenb.top/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Spring boot测试类MockMvcResultHandlers.print()乱码</title>
    <link href="https://www.chenb.top/2021/01/27/spring-boot-test-encoding-error/"/>
    <id>https://www.chenb.top/2021/01/27/spring-boot-test-encoding-error/</id>
    <published>2021-01-27T09:39:47.000Z</published>
    <updated>2022-01-20T02:23:10.008Z</updated>
    
    <content type="html"><![CDATA[<h3 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h3><p>Spring boot升级到2.3以后，测试类中的MockMvcResultHandlers.print()打印出来的字符都是乱码了，查了一下改动比较大，一个一个修改很麻烦，可以抽象到BaseTest中</p><h3 id="基类中的公共方法"><a href="#基类中的公共方法" class="headerlink" title="基类中的公共方法"></a>基类中的公共方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试post接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postForTest</span><span class="params">(String except, Object content, String url, <span class="keyword">boolean</span> isPrint)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    ResultActions resultActions = <span class="keyword">this</span>.mock.perform(</span><br><span class="line">            post(url).headers(headers).content(<span class="keyword">new</span> JsonMapper().toJson(content))</span><br><span class="line">    ).andExpect(status().isOk());</span><br><span class="line">    resultActions.andReturn().getResponse().setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (isPrint) &#123;</span><br><span class="line">        resultActions.andDo(MockMvcResultHandlers.print());</span><br><span class="line">    &#125;</span><br><span class="line">    resultActions.andExpect(content().json(except));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Spring boot测试类MockMvcResultHandlers.print()乱码
    
    </summary>
    
      <category term="技术总结" scheme="https://www.chenb.top/categories/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Spring boot" scheme="https://www.chenb.top/tags/Spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot Admin添加安全验证</title>
    <link href="https://www.chenb.top/2021/01/27/securing-spring-boot-admin/"/>
    <id>https://www.chenb.top/2021/01/27/securing-spring-boot-admin/</id>
    <published>2021-01-27T09:02:54.000Z</published>
    <updated>2022-01-20T02:23:10.008Z</updated>
    
    <content type="html"><![CDATA[<h3 id="阿里云安全警告"><a href="#阿里云安全警告" class="headerlink" title="阿里云安全警告"></a>阿里云安全警告</h3><p>阿里云受工业和信息化部网络安全管理局委托通知您，您的资产：XX.XX.XX.XX，存在Spring Boot Admin 未授权访问漏洞，漏洞报告地址：…，详情请查阅邮件或站内信。请您参照修复建议尽快进行整改，避免漏洞被黑客利用，对于长期存在安全隐患但未整改的网络资源，监管部门可能会下达行政处罚（关停、约谈等），望您务必重视。</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>Spring Boot监控系统一直没有加安全机制，被工信部点名了，需要加上账号密码验证。</p><h3 id="Spring-Boot-Admin-Server端"><a href="#Spring-Boot-Admin-Server端" class="headerlink" title="Spring Boot Admin Server端"></a>Spring Boot Admin Server端</h3><p>pom.xml中添加security<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><br>项目里面添加配置类SecuritySecureConfig.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecuritySecureConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> AdminServerProperties adminServer;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SecuritySecureConfig</span><span class="params">(AdminServerProperties adminServer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.adminServer = adminServer;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    SavedRequestAwareAuthenticationSuccessHandler successHandler = <span class="keyword">new</span> SavedRequestAwareAuthenticationSuccessHandler();</span><br><span class="line">    successHandler.setTargetUrlParameter(<span class="string">&quot;redirectTo&quot;</span>);</span><br><span class="line">    successHandler.setDefaultTargetUrl(<span class="keyword">this</span>.adminServer.path(<span class="string">&quot;/&quot;</span>));</span><br><span class="line"></span><br><span class="line">    http.authorizeRequests(</span><br><span class="line">        (authorizeRequests) -&gt; authorizeRequests.antMatchers(<span class="keyword">this</span>.adminServer.path(<span class="string">&quot;/assets/**&quot;</span>)).permitAll() </span><br><span class="line">            .antMatchers(<span class="keyword">this</span>.adminServer.path(<span class="string">&quot;/login&quot;</span>)).permitAll().anyRequest().authenticated() </span><br><span class="line">    ).formLogin(</span><br><span class="line">        (formLogin) -&gt; formLogin.loginPage(<span class="keyword">this</span>.adminServer.path(<span class="string">&quot;/login&quot;</span>)).successHandler(successHandler).and() </span><br><span class="line">    ).logout((logout) -&gt; logout.logoutUrl(<span class="keyword">this</span>.adminServer.path(<span class="string">&quot;/logout&quot;</span>))).httpBasic(Customizer.withDefaults()) </span><br><span class="line">        .csrf((csrf) -&gt; csrf.csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse()) </span><br><span class="line">            .ignoringRequestMatchers(</span><br><span class="line">                <span class="keyword">new</span> AntPathRequestMatcher(<span class="keyword">this</span>.adminServer.path(<span class="string">&quot;/instances&quot;</span>),</span><br><span class="line">                    HttpMethod.POST.toString()), </span><br><span class="line">                <span class="keyword">new</span> AntPathRequestMatcher(<span class="keyword">this</span>.adminServer.path(<span class="string">&quot;/instances/*&quot;</span>),</span><br><span class="line">                    HttpMethod.DELETE.toString()), </span><br><span class="line">                <span class="keyword">new</span> AntPathRequestMatcher(<span class="keyword">this</span>.adminServer.path(<span class="string">&quot;/actuator/**&quot;</span>)) </span><br><span class="line">            ))</span><br><span class="line">        .rememberMe((rememberMe) -&gt; rememberMe.key(UUID.randomUUID().toString()).tokenValiditySeconds(<span class="number">1209600</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Required to provide UserDetailsService for &quot;remember functionality&quot;</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 这里的账号密码改成自己需要的        </span></span><br><span class="line">    auth.inMemoryAuthentication().withUser(<span class="string">&quot;user&quot;</span>).password(<span class="string">&quot;&#123;noop&#125;password&quot;</span>).roles(<span class="string">&quot;USER&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>注意： 记录一下最后一个方法的账号密码，Client端需要填写相关的配置</p><h3 id="Spring-Boot-Admin-Client端"><a href="#Spring-Boot-Admin-Client端" class="headerlink" title="Spring Boot Admin Client端"></a>Spring Boot Admin Client端</h3><p>添加账号密码的配置<br><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.boot.admin.client.username</span>=<span class="string">user</span></span><br><span class="line"><span class="meta">spring.boot.admin.client.password</span>=<span class="string">password</span></span><br></pre></td></tr></table></figure></p><h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><p>Spring Boot Admin版本：<code>2.3.0</code><br>官网相关文章： <a href="https://codecentric.github.io/spring-boot-admin/2.3.0/#securing-spring-boot-admin">保护Spring Boot Admin服务器</a></p>]]></content>
    
    <summary type="html">
    
      阿里云Spring Boot Admin 未授权访问漏洞，需要添加安全验证解决
    
    </summary>
    
      <category term="技术总结" scheme="https://www.chenb.top/categories/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Spring boot" scheme="https://www.chenb.top/tags/Spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>重装系统提示无法创建新的分区，也找不到现有的分区</title>
    <link href="https://www.chenb.top/2021/01/27/windows-install/"/>
    <id>https://www.chenb.top/2021/01/27/windows-install/</id>
    <published>2021-01-27T07:28:42.000Z</published>
    <updated>2022-01-20T02:23:10.009Z</updated>
    
    <content type="html"><![CDATA[<p>终结解决方案：利用Windows自带的引导文件进行安装<br>首先进入PE，在PE下找到你的系统ISO镜像，解压缩，然后将镜像里的<code>boot文件夹、sources文件夹和bootmgr文件</code>提取出来，然后复制到你要安装的分区（比如c盘），接下来拔下U盘，重新启动计算机，即可进入Windows安装界面进行正常安装。</p>]]></content>
    
    <summary type="html">
    
      重装系统提示无法创建新的分区，也找不到现有的分区
    
    </summary>
    
      <category term="技术总结" scheme="https://www.chenb.top/categories/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Windows" scheme="https://www.chenb.top/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Spring boot Too many open files错误</title>
    <link href="https://www.chenb.top/2020/07/24/spring-boot-too-many-open-files/"/>
    <id>https://www.chenb.top/2020/07/24/spring-boot-too-many-open-files/</id>
    <published>2020-07-24T02:03:33.000Z</published>
    <updated>2022-01-20T02:23:10.008Z</updated>
    
    <content type="html"><![CDATA[<h3 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h3><p>前端同事突然告知集成环境连不上了，然后我连ssh测试一下，发现整个服务器都变得很慢了，监控显示有个dbus进程占用了100%的CPU。首先反应是被攻击了？最近就只是部署了一个新版本的webflux项目，查看了一下各种日志，发现到处都在报<code>Too many open files</code>。该服务器是测试服务器，里面用Docker部署了一堆容器：<code>Jenkins</code>,<code>MySQL</code>,<code>Redis</code>,<code>Spring boot admin</code>等等。此时Jenkins容器已经挂了，其他的虽然没挂但是也连不上了。猜测是Linux文件系统出了问题。</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>各种搜索后，发现这是<code>io.projectreactor.netty:reactor-netty:0.9.8.RELEASE</code>的一个bug，更新到<code>0.9.9.RELEASE</code>就可以修复了。<br>相关链接：<br><a href="https://github.com/spring-projects/spring-boot/issues/21923">Too many open files after upgrade to Spring Boot 2.2.8 #21923</a><br><a href="https://github.com/spring-projects/spring-boot/issues/21934">Many File Open Issue : Spring Boot 2.3.0 -&gt; Spring Boot 2.3.1 #21934</a><br><a href="https://github.com/wayne-robinson/thule/commit/c13d2ce7c92f420612e658419bb1236f59cfd011">Spring Boot uses version 0.9.8.RELEASE which contains a bug producing…</a></p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>临时处理：先解决眼下的问题，kill掉dbus进程，然后重启服务器，做一下清理工作（redis日志多出来10个G撑爆了磁盘），然后重启每个容器，一切都正常了。后续还要关注一下Spring boot新版本这个问题的修复情况。<br>Spring boot 2.3.2将会修复这个bug，应该快了，再等等吧。OVER</p>]]></content>
    
    <summary type="html">
    
      记录升级Spring boot大版本后服务器宕机的问题
    
    </summary>
    
      <category term="技术总结" scheme="https://www.chenb.top/categories/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Spring boot" scheme="https://www.chenb.top/tags/Spring-boot/"/>
    
      <category term="Netty" scheme="https://www.chenb.top/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>Spring boot升级到2.3.1笔记</title>
    <link href="https://www.chenb.top/2020/07/06/spring-boot-update-version2/"/>
    <id>https://www.chenb.top/2020/07/06/spring-boot-update-version2/</id>
    <published>2020-07-06T08:35:39.000Z</published>
    <updated>2022-01-20T02:23:10.008Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>老版本的Spring boot已经继续用了2年了，最近发现官网的推荐版本已经没有了1.5系列的了，下决心要升级大版本，把之前写的升级方案找出来参考了一下，这次应该还会碰到一些其他问题，特此记录以备不时之需</p></blockquote><ul><li>Spring boot版本：<code>1.5.8.RELEASE</code> -&gt; <code>2.3.1.RELEASE</code></li><li>Spring Data JPA版本: <code>1.11.8.RELEASE</code> -&gt; <code>2.3.1.RELEASE</code></li></ul><p>本来想按官网的更稳妥的方案一步一步升级，但是由于我们使用的Spring boot功能比较少，CTO建议直接升级到最新版本<br>先按两年前的方案修改各种配置：<a href="/blog/2018/11/26/spring-boot-update-version">Spring boot升级到2.1</a></p><h3 id="添加升级工具"><a href="#添加升级工具" class="headerlink" title="添加升级工具"></a>添加升级工具</h3><p>升级文档中发现有升级工具，添加到pom中<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 升级工具 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-properties-migrator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="本地h2数据库保留字问题"><a href="#本地h2数据库保留字问题" class="headerlink" title="本地h2数据库保留字问题"></a>本地h2数据库保留字问题</h3><p>查询了一下，h2数据库版本从<code>1.4.196</code>到<code>1.4.200</code>，原先数据库表中有一些名称为<code>row</code>的字段，这些字段都变成保留字了，初始化的sql执行报错<br>原先思路是修改字段名称，这样改动太大了，CTO建议h2单独切换回老版本，测试后没有问题了<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.196<span class="tag">&lt;/<span class="name">version</span>&gt;</span><span class="comment">&lt;!-- 添加一行指定版本号 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="swagger2版本冲突问题"><a href="#swagger2版本冲突问题" class="headerlink" title="swagger2版本冲突问题"></a>swagger2版本冲突问题</h3><p>启动仍然报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">***************************</span><br><span class="line">APPLICATION FAILED TO START</span><br><span class="line">***************************</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line"></span><br><span class="line">Parameter 0 of method linkDiscoverers in org.springframework.hateoas.config.HateoasConfiguration required a single bean, but 3 were found:</span><br><span class="line">- relProviderPluginRegistry: defined by method &#39;relProviderPluginRegistry&#39; in class path resource [org&#x2F;springframework&#x2F;hateoas&#x2F;config&#x2F;HateoasConfiguration.class]</span><br><span class="line">- linkDiscovererRegistry: defined in null</span><br><span class="line">- entityLinksPluginRegistry: defined by method &#39;entityLinksPluginRegistry&#39; in class path resource [org&#x2F;springframework&#x2F;hateoas&#x2F;config&#x2F;WebMvcEntityLinksConfiguration.class]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Action:</span><br><span class="line"></span><br><span class="line">Consider marking one of the beans as @Primary, updating the consumer to accept multiple beans, or using @Qualifier to identify the bean that should be consumed</span><br><span class="line"></span><br><span class="line">Disconnected from the target VM, address: &#39;127.0.0.1:61337&#39;, transport: &#39;socket&#39;</span><br><span class="line"></span><br><span class="line">Process finished with exit code 1</span><br></pre></td></tr></table></figure><br>网上搜索了一下这个报错，说是和swagger2版本有关，修改pom中的版本号（<code>2.2.2</code>-&gt;<code>2.9.2</code>）之后问题就解决了</p><h3 id="时间格式问题"><a href="#时间格式问题" class="headerlink" title="时间格式问题"></a>时间格式问题</h3><p>测试类报了时间比对错误，去官网升级指南中找到了相关说明：<br>In 2.0, we’ve flipped a Jackson configuration default to write JSR-310 dates as ISO-8601 strings. If you wish to return to the previous behavior, you can add <code>spring.jackson.serialization.write-dates-as-timestamps=true</code> to your configuration.<br>在测试类中添加时间格式设置<br><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.jackson.serialization.write-dates-as-timestamps</span> = <span class="string">true</span></span><br></pre></td></tr></table></figure><br>到此为止，新版本的兼容已经OK了，项目能正常运行了，测试类也全部可以通过了。<br>后面仍需要完善一些警告，过时方法等，经过小范围的试用后就可以确定升级方案了。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>Spring boot v1.5 → v2.0 升级指南：<a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.0-Migration-Guide">Spring Boot 2.0 Migration Guide</a><br>Spring boot 最新文档：<a href="https://docs.spring.io/spring-boot/docs/2.3.1.RELEASE/reference/html/">Spring Boot Reference Documentation</a></p>]]></content>
    
    <summary type="html">
    
      Spring boot从1.5.8升级到2.3.1
    
    </summary>
    
      <category term="技术总结" scheme="https://www.chenb.top/categories/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Spring boot" scheme="https://www.chenb.top/tags/Spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>Java封装orika实现对象拷贝</title>
    <link href="https://www.chenb.top/2020/06/19/java-orika/"/>
    <id>https://www.chenb.top/2020/06/19/java-orika/</id>
    <published>2020-06-19T05:10:57.000Z</published>
    <updated>2022-01-20T02:23:10.008Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>一直使用orika复制对象，最近偶然发现了orika还有属性复制的功能，研究后封装了一下，以后用起来就更方便了</p><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ma.glasnost.orika<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>orika-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h3><ul><li>做了简单的封装，按业务需要可以选择是否覆盖空值</li><li>还有很多更灵活的配置暂时没用到，比如可以指定不同名字、不同类型字段的映射关系，这些等以后有需求的时候再加上<figure class="highlight java"><figcaption><span>BeanMapper.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ma.glasnost.orika.MapperFacade;</span><br><span class="line"><span class="keyword">import</span> ma.glasnost.orika.MapperFactory;</span><br><span class="line"><span class="keyword">import</span> ma.glasnost.orika.impl.DefaultMapperFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单封装orika, 实现深度转换Bean&lt;-&gt;Bean的Mapper.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MapperFacade defaultMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MapperFacade ignoreNullMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        MapperFactory defaultMapperFactory = <span class="keyword">new</span> DefaultMapperFactory.Builder().build();</span><br><span class="line">        defaultMapper = defaultMapperFactory.getMapperFacade();</span><br><span class="line">        MapperFactory ignoreNullMapperFactory = <span class="keyword">new</span> DefaultMapperFactory.Builder().mapNulls(<span class="keyword">false</span>).build();</span><br><span class="line">        ignoreNullMapper = ignoreNullMapperFactory.getMapperFacade();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 复制对象的属性（忽略null）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S, D&gt; <span class="function"><span class="keyword">void</span> <span class="title">mapIgnoreNull</span><span class="params">(S sourceObject, D destinationObject)</span> </span>&#123;</span><br><span class="line">        ignoreNullMapper.map(sourceObject, destinationObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 复制对象的属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S, D&gt; <span class="function"><span class="keyword">void</span> <span class="title">map</span><span class="params">(S sourceObject, D destinationObject)</span> </span>&#123;</span><br><span class="line">        defaultMapper.map(sourceObject, destinationObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 复制对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S, D&gt; <span class="function">D <span class="title">map</span><span class="params">(S source, Class&lt;D&gt; destinationClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> defaultMapper.map(source, destinationClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 复制对象list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S, D&gt; <span class="function">List&lt;D&gt; <span class="title">mapList</span><span class="params">(Iterable&lt;S&gt; sourceList, Class&lt;D&gt; destinationClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> defaultMapper.mapAsList(sourceList, destinationClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      Java封装orika实现对象拷贝
    
    </summary>
    
      <category term="技术总结" scheme="https://www.chenb.top/categories/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Java" scheme="https://www.chenb.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java获取文件真实格式</title>
    <link href="https://www.chenb.top/2020/01/16/java-input-stream-get-file-type/"/>
    <id>https://www.chenb.top/2020/01/16/java-input-stream-get-file-type/</id>
    <published>2020-01-16T05:47:41.000Z</published>
    <updated>2022-01-20T02:23:10.008Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>很多时候，文件的类型和后缀名不一致，这样就不能简单的用后缀名判断文件的格式。<br>例如：POI导入excel只能支持.xls和.xlsx的文件解析，但有些真实格式为csv或html的.xls文件混入其中就会导致导入失败，那么就需要根据头部信息匹配格式</p><h3 id="获取文件真实类型"><a href="#获取文件真实类型" class="headerlink" title="获取文件真实类型"></a>获取文件真实类型</h3><ol><li>获取文件的头部字节</li><li>将头部字节转换成16进制字符串</li><li>匹配字符串获取文件类型</li></ol><figure class="highlight java"><figcaption><span>FileTypeJudge.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件类型判断类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FileTypeJudge</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructor</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">FileTypeJudge</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将文件头转换成16进制字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">bytesToHexString</span><span class="params">(<span class="keyword">byte</span>[] src)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">if</span> (src == <span class="keyword">null</span> || src.length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">byte</span> b : src) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = b &amp; <span class="number">0xFF</span>;</span><br><span class="line">            String hv = Integer.toHexString(v);</span><br><span class="line">            <span class="keyword">if</span> (hv.length() &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                stringBuilder.append(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            stringBuilder.append(hv);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 得到文件头</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getFileContent</span><span class="params">(InputStream inputStream)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">28</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inputStream.read(b, <span class="number">0</span>, <span class="number">28</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (inputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                inputStream.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bytesToHexString(b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断文件类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> FileType <span class="title">getType</span><span class="params">(InputStream inputStream)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String fileHead = getFileContent(inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (fileHead == <span class="keyword">null</span> || fileHead.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (FileType type : FileType.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fileHead.startsWith(type.code)) &#123;</span><br><span class="line">                <span class="keyword">return</span> type;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * InputStream转ByteArrayOutputStream，用于流的复制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ByteArrayOutputStream <span class="title">cloneInputStream</span><span class="params">(InputStream input)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = input.read(buffer)) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">            baos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        baos.flush();</span><br><span class="line">        <span class="keyword">return</span> baos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关于流的复制"><a href="#关于流的复制" class="headerlink" title="关于流的复制"></a>关于流的复制</h3><p>由于判断文件格式需要读取流的头部信息，这个读取是不可逆的，而判断完文件格式后通常还需要读文件，所以需要复制一个InputStream<br><figure class="highlight java"><figcaption><span>复制InputStream</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">InputStream fis = request.getFile(<span class="string">&quot;file&quot;</span>).getInputStream();</span><br><span class="line">ByteArrayOutputStream temp = cloneInputStream(fis);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开两个新的输入流，一个用于判断文件类型，还有一个用于读取文件内容</span></span><br><span class="line">InputStream stream1 = <span class="keyword">new</span> ByteArrayInputStream(temp.toByteArray());</span><br><span class="line">InputStream stream2 = <span class="keyword">new</span> ByteArrayInputStream(temp.toByteArray());</span><br></pre></td></tr></table></figure></p><h3 id="文件类型枚举"><a href="#文件类型枚举" class="headerlink" title="文件类型枚举"></a>文件类型枚举</h3><p>罗列了大部分文件格式的头部信息，如果有新的格式可以测试后添加进去<br><figure class="highlight java"><figcaption><span>FileType.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件类型枚取</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">FileType</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * JPEG(jpg)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    JPG(<span class="string">&quot;ffd8ffe000104a464946&quot;</span>,<span class="string">&quot;jpg&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * PNG(png)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    PNG(<span class="string">&quot;89504e470d0a1a0a0000&quot;</span>,<span class="string">&quot;png&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * GIF(gif)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    GIF(<span class="string">&quot;47494638396126026f01&quot;</span>,<span class="string">&quot;gif&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * TIFF(tif)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TIF(<span class="string">&quot;49492a00227105008037&quot;</span>,<span class="string">&quot;tif&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 16色位图(bmp)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    BMP_16(<span class="string">&quot;424d228c010000000000&quot;</span>,<span class="string">&quot;bmp&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 24位位图(bmp)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    BMP_24(<span class="string">&quot;424d8240090000000000&quot;</span>,<span class="string">&quot;bmp&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 256色位图(bmp)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    BMP_256(<span class="string">&quot;424d8e1b030000000000&quot;</span>,<span class="string">&quot;bmp&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * CAD(dwg)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    DWG(<span class="string">&quot;41433130313500000000&quot;</span>,<span class="string">&quot;dwg&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HTML(html)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    HTML(<span class="string">&quot;3c21444f435459504520&quot;</span>,<span class="string">&quot;html&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HTM(htm)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    HTM(<span class="string">&quot;3c21646f637479706520&quot;</span>,<span class="string">&quot;htm&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 猎聘、智联简历。htm</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    HTM_2(<span class="string">&quot;3c68746d6c20786d6c6e&quot;</span>,<span class="string">&quot;htm&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * css</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    CSS(<span class="string">&quot;48544d4c207b0d0a0942&quot;</span>,<span class="string">&quot;css&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * js</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    JS(<span class="string">&quot;696b2e71623d696b2e71&quot;</span>,<span class="string">&quot;js&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * RichTextFormat(rtf)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RTF(<span class="string">&quot;7b5c727466315c616e73&quot;</span>,<span class="string">&quot;rtf&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Photoshop(psd)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    PSD(<span class="string">&quot;38425053000100000000&quot;</span>,<span class="string">&quot;psd&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Email[OutlookExpress6](eml)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    EML(<span class="string">&quot;46726f6d3a203d3f6762&quot;</span>,<span class="string">&quot;eml&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MSExcel注意：word、msi和excel的文件头一样</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    DOC(<span class="string">&quot;d0cf11e0a1b11ae10000&quot;</span>,<span class="string">&quot;doc&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * docx文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    DOCX(<span class="string">&quot;504b0304140006000800&quot;</span>,<span class="string">&quot;docx&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MSAccess(mdb)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    MDB(<span class="string">&quot;5374616E64617264204A&quot;</span>,<span class="string">&quot;mdb&quot;</span>),</span><br><span class="line">    PS(<span class="string">&quot;252150532D41646F6265&quot;</span>,<span class="string">&quot;ps&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * AdobeAcrobat(pdf)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    PDF(<span class="string">&quot;255044462d312e350d0a&quot;</span>,<span class="string">&quot;pdf&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * rmvb/rm相同</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RMVB(<span class="string">&quot;2e524d46000000120001&quot;</span>,<span class="string">&quot;rmvb&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * flv与f4v相同</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    FLV(<span class="string">&quot;464c5601050000000900&quot;</span>,<span class="string">&quot;flv&quot;</span>),</span><br><span class="line">    MP4(<span class="string">&quot;00000020667479706d70&quot;</span>,<span class="string">&quot;mp4&quot;</span>),</span><br><span class="line">    MP3(<span class="string">&quot;49443303000000002176&quot;</span>,<span class="string">&quot;mp3&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    MPG(<span class="string">&quot;000001ba210001000180&quot;</span>,<span class="string">&quot;mpg&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * wmv与asf相同</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    WMV(<span class="string">&quot;3026b2758e66cf11a6d9&quot;</span>,<span class="string">&quot;wmv&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Wave(wav)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    WAV(<span class="string">&quot;52494646e27807005741&quot;</span>,<span class="string">&quot;wav&quot;</span>),</span><br><span class="line">    AVI(<span class="string">&quot;52494646d07d60074156&quot;</span>,<span class="string">&quot;avi&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MIDI(mid)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    MID(<span class="string">&quot;4d546864000000060001&quot;</span>,<span class="string">&quot;mid&quot;</span>),</span><br><span class="line">    ZIP(<span class="string">&quot;504b0304140000000800&quot;</span>,<span class="string">&quot;zip&quot;</span>),</span><br><span class="line">    RAR(<span class="string">&quot;526172211a0700cf9073&quot;</span>,<span class="string">&quot;rar&quot;</span>),</span><br><span class="line">    INI(<span class="string">&quot;235468697320636f6e66&quot;</span>,<span class="string">&quot;ini&quot;</span>),</span><br><span class="line">    JAR(<span class="string">&quot;504b03040a0000000000&quot;</span>,<span class="string">&quot;jar&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可执行文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    EXE(<span class="string">&quot;4d5a9000030000000400&quot;</span>,<span class="string">&quot;exe&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * jsp文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    JSP(<span class="string">&quot;3c25402070616765206c&quot;</span>,<span class="string">&quot;jsp&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MF文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    MF(<span class="string">&quot;4d616e69666573742d56&quot;</span>,<span class="string">&quot;mf&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * xml文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    XML(<span class="string">&quot;3c3f786d6c2076657273&quot;</span>,<span class="string">&quot;xml&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * sql文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SQL(<span class="string">&quot;494e5345525420494e54&quot;</span>,<span class="string">&quot;sql&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * java文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    JAVA(<span class="string">&quot;7061636b616765207765&quot;</span>,<span class="string">&quot;java&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * bat文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    BAT(<span class="string">&quot;406563686f206f66660d&quot;</span>,<span class="string">&quot;bat&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * gz文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    GZ(<span class="string">&quot;1f8b0800000000000000&quot;</span>,<span class="string">&quot;gz&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * bat文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    PROPERTIES(<span class="string">&quot;6c6f67346a2e726f6f74&quot;</span>,<span class="string">&quot;properties&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * bat文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    CLASS(<span class="string">&quot;cafebabe0000002e0041&quot;</span>,<span class="string">&quot;class&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * bat文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    CHM(<span class="string">&quot;49545346030000006000&quot;</span>,<span class="string">&quot;chm&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * bat文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    MXP(<span class="string">&quot;04000000010000001300&quot;</span>,<span class="string">&quot;mxp&quot;</span>),</span><br><span class="line">    TORRENT(<span class="string">&quot;6431303a637265617465&quot;</span>,<span class="string">&quot;torrent&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 51job简历。mht</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    MHT(<span class="string">&quot;46726f6d3a3cd3c920cd&quot;</span>,<span class="string">&quot;mht&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Quicktime(mov)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    MOV(<span class="string">&quot;6D6F6F76&quot;</span>,<span class="string">&quot;mov&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * WordPerfect(wpd)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    WPD(<span class="string">&quot;FF575043&quot;</span>,<span class="string">&quot;wpd&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * OutlookExpress(dbx)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    DBX(<span class="string">&quot;CFAD12FEC5FD746F&quot;</span>,<span class="string">&quot;dbx&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Outlook(pst)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    PST(<span class="string">&quot;2142444E&quot;</span>,<span class="string">&quot;pst&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Quicken(qdf)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    QDF(<span class="string">&quot;AC9EBD8F&quot;</span>,<span class="string">&quot;qdf&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * WindowsPassword(pwl)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    PWL(<span class="string">&quot;E3828596&quot;</span>,<span class="string">&quot;pwl&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * RealAudio(ram)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RAM(<span class="string">&quot;2E7261FD&quot;</span>,<span class="string">&quot;ram&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String code;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    FileType(String code, String name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      根据数据流的头部信息匹配文件的真实格式
    
    </summary>
    
      <category term="技术总结" scheme="https://www.chenb.top/categories/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Java" scheme="https://www.chenb.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java使用Jsoup把html流转成Apache POI的EXCEL格式</title>
    <link href="https://www.chenb.top/2020/01/16/java-html-to-excel/"/>
    <id>https://www.chenb.top/2020/01/16/java-html-to-excel/</id>
    <published>2020-01-16T05:16:32.000Z</published>
    <updated>2022-11-03T08:56:40.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>一些银行导出的excel真实格式为html，这种情况无法导入到系统，所以要程序中转换一下格式</p><h3 id="通用方法"><a href="#通用方法" class="headerlink" title="通用方法"></a>通用方法</h3><p>主要逻辑：Jsoup解析html获取所有table对象的行和列生成二维数组，再根据二维数组生成Workbook对象</p><blockquote><p><strong>注意：</strong> 表头部分有时候是<code>&lt;th&gt;</code>标签</p></blockquote><p>如何根据数据流判断是否为html格式，请看另一篇文章：<a href="/2020/01/16/java-input-stream-get-file-type">Java获取文件真实格式</a></p><figure class="highlight java"><figcaption><span>PoiUtils.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * html格式的流转成xls格式的workbook</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Workbook <span class="title">getWorkbookByHtml</span><span class="params">(InputStream inputStream)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Document document = Jsoup.parse(inputStream, <span class="string">&quot;UTF-8&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    ArrayList&lt;String[]&gt; dataList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Elements rows = document.getElementsByTag(<span class="string">&quot;tr&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (Element row : rows) &#123;</span><br><span class="line">        List&lt;String&gt; temp = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Elements ths = row.getElementsByTag(<span class="string">&quot;th&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Element th : ths) &#123;</span><br><span class="line">            temp.add(th.text());</span><br><span class="line">        &#125;</span><br><span class="line">        Elements tds = row.getElementsByTag(<span class="string">&quot;td&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Element td : tds) &#123;</span><br><span class="line">            temp.add(td.text());</span><br><span class="line">        &#125;</span><br><span class="line">        String[] array = <span class="keyword">new</span> String[temp.size()];</span><br><span class="line">        temp.toArray(array);</span><br><span class="line">        dataList.add(array);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> getWorkbook(dataList);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二维数组生成workbook对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Workbook <span class="title">getWorkbook</span><span class="params">(ArrayList&lt;String[]&gt; dataList)</span> </span>&#123;</span><br><span class="line">    HSSFWorkbook result = <span class="keyword">new</span> HSSFWorkbook();</span><br><span class="line">    HSSFSheet sheet = result.createSheet(<span class="string">&quot;new sheet&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> rowNum = <span class="number">0</span>; rowNum &lt; dataList.size(); rowNum++) &#123;</span><br><span class="line">        String[] data = dataList.get(rowNum);</span><br><span class="line">        HSSFRow row = sheet.createRow(rowNum);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> columnNum = <span class="number">0</span>; columnNum &lt; data.length; columnNum++) &#123;</span><br><span class="line">            HSSFCell cell = row.createCell(columnNum);</span><br><span class="line">            cell.setCellValue(data[columnNum]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Java使用JavaCSV把CSV流转成Apache POI的EXCEL格式，可用于文件格式互转和一些其他处理
    
    </summary>
    
      <category term="技术总结" scheme="https://www.chenb.top/categories/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Java" scheme="https://www.chenb.top/tags/Java/"/>
    
      <category term="Jsoup" scheme="https://www.chenb.top/tags/Jsoup/"/>
    
      <category term="Apache" scheme="https://www.chenb.top/tags/Apache/"/>
    
      <category term="POI" scheme="https://www.chenb.top/tags/POI/"/>
    
      <category term="Excel" scheme="https://www.chenb.top/tags/Excel/"/>
    
  </entry>
  
  <entry>
    <title>Java反射获取和修改成员变量</title>
    <link href="https://www.chenb.top/2019/12/25/java-reflect/"/>
    <id>https://www.chenb.top/2019/12/25/java-reflect/</id>
    <published>2019-12-25T05:38:05.000Z</published>
    <updated>2022-01-20T02:23:10.008Z</updated>
    
    <content type="html"><![CDATA[<p>特定的需求需要根据前端传的字段名称设置值，这时候使用反射比较方便</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 反射工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据传入的属性名字符串，获取对应的属性值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     *            属性名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment">     *            要获取的实例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getField</span><span class="params">(String name, Object obj)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException </span>&#123;</span><br><span class="line">        Class&lt;?&gt; clazz = obj.getClass();</span><br><span class="line">        Field field = clazz.getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> field.get(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据传入的属性名字符串，修改对应的属性值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     *            属性名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment">     *            要修改的实例对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     *            修改后的新值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setField</span><span class="params">(String name, Object obj, Object value)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException </span>&#123;</span><br><span class="line">        Class&lt;?&gt; clazz = obj.getClass();</span><br><span class="line">        Field field = clazz.getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;</span><br><span class="line">        IncomeTaxDeclarationMain a = <span class="keyword">new</span> IncomeTaxDeclarationMain();</span><br><span class="line">        a.row9 = BigDecimal.TEN;</span><br><span class="line">        IncomeTaxDeclarationMain b = <span class="keyword">new</span> IncomeTaxDeclarationMain();</span><br><span class="line">        setField(<span class="string">&quot;row9&quot;</span>, b, getField(<span class="string">&quot;row9&quot;</span>, a));</span><br><span class="line">        System.out.println(b.row9);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Java反射获取和修改成员变量
    
    </summary>
    
      <category term="技术总结" scheme="https://www.chenb.top/categories/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Java" scheme="https://www.chenb.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>一条命令安装docker</title>
    <link href="https://www.chenb.top/2019/12/18/docker-one-key/"/>
    <id>https://www.chenb.top/2019/12/18/docker-one-key/</id>
    <published>2019-12-18T08:23:06.000Z</published>
    <updated>2023-07-13T14:09:33.087Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>不搞那么复杂，就一行命令搞定：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -fSsL http://www.chenb.top/deploy/docker-install.sh)</span><br></pre></td></tr></table></figure></p><h3 id="脚本代码"><a href="#脚本代码" class="headerlink" title="脚本代码"></a>脚本代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># install docker</span></span><br><span class="line"><span class="comment"># bash &lt;(curl -fSsL http://www.chenb.top/deploy/docker-install.sh)</span></span><br><span class="line"></span><br><span class="line">now=`date +%s`</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">log</span></span>() &#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;[<span class="subst">$((`date +%s` - now )</span>)] ## <span class="variable">$@</span> ##&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">log</span> <span class="string">&quot;Installation start at `date`&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># check</span></span><br><span class="line">[[ `whoami` != <span class="string">&quot;root&quot;</span> ]] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;Root Privilege needed, use sudo please.&quot;</span> &amp;&amp; <span class="built_in">exit</span> 1</span><br><span class="line">OS=`awk -F= <span class="string">&#x27;/^NAME/&#123;print $2&#125;&#x27;</span> /etc/os-release | sed <span class="string">&quot;s/\&quot;//g&quot;</span>`</span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$OS</span>&quot;</span> == <span class="string">&quot;Ubuntu&quot;</span> ]];<span class="keyword">then</span></span><br><span class="line">  :</span><br><span class="line"><span class="keyword">elif</span> [[ <span class="string">&quot;<span class="variable">$OS</span>&quot;</span> == <span class="string">&quot;CentOS Linux&quot;</span> ]];<span class="keyword">then</span></span><br><span class="line">  OS=<span class="string">&quot;CentOS&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Unknown OS: \&quot;<span class="variable">$OS</span>\&quot;, exit&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> 2</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># install docker</span></span><br><span class="line"><span class="built_in">log</span> <span class="string">&quot;install and upgrade docker&quot;</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$OS</span>&quot;</span> == <span class="string">&quot;Ubuntu&quot;</span> ]];<span class="keyword">then</span></span><br><span class="line">  apt-get update</span><br><span class="line">  apt-get -y install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line">  curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | apt-key add -</span><br><span class="line">  add-apt-repository -u <span class="string">&quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br><span class="line">  apt-get -y install docker-ce</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$OS</span>&quot;</span> == <span class="string">&quot;CentOS&quot;</span> ]];<span class="keyword">then</span></span><br><span class="line">  yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">  yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">  yum makecache fast</span><br><span class="line">  yum -y install docker-ce</span><br><span class="line">  systemctl <span class="built_in">enable</span> docker &amp;&amp; systemctl start docker  </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># congifure mirror and insecure registries</span></span><br><span class="line"><span class="built_in">log</span> <span class="string">&quot;congifure mirror and insecure registries&quot;</span></span><br><span class="line">cat &gt; /etc/docker/daemon.json &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;registry-mirrors&quot;: [&quot;https://m.mirror.aliyuncs.com&quot;]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">systemctl daemon-reload &amp;&amp; systemctl restart docker</span><br><span class="line"><span class="built_in">log</span> <span class="string">&quot;Installation end at `date`&quot;</span></span><br></pre></td></tr></table></figure><h3 id="启动Jenkins的命令"><a href="#启动Jenkins的命令" class="headerlink" title="启动Jenkins的命令"></a>启动Jenkins的命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  --name jenkins \</span><br><span class="line">  -d \</span><br><span class="line">  -u root \</span><br><span class="line">  -p 8080:8080 \</span><br><span class="line">  -v jenkins-data:/var/jenkins_home \</span><br><span class="line">  -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">  -v /usr/bin/docker:/usr/bin/docker \</span><br><span class="line">  -e TZ=Asia/Shanghai \</span><br><span class="line">  -v <span class="string">&quot;<span class="variable">$HOME</span>&quot;</span>:/home \</span><br><span class="line">  -m 2g \</span><br><span class="line">  jenkins/jenkins:2.401.1</span><br></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p>GitHub项目地址：<a href="https://github.com/chenbin-353549444/deploy">https://github.com/chenbin-353549444/deploy</a><br>参考别人的项目：<a href="https://github.com/wrfly/k8s-install.sh">https://github.com/wrfly/k8s-install.sh</a><br>官网安装链接：<a href="https://docs.docker.com/install/linux/docker-ce/centos/">https://docs.docker.com/install/linux/docker-ce/centos/</a></p>]]></content>
    
    <summary type="html">
    
      不搞那么复杂，就一行命令搞定，写一个脚本就可以了
    
    </summary>
    
      <category term="技术总结" scheme="https://www.chenb.top/categories/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Shell" scheme="https://www.chenb.top/tags/Shell/"/>
    
      <category term="Docker" scheme="https://www.chenb.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker定制镜像</title>
    <link href="https://www.chenb.top/2019/12/03/docker-java-mysql-redis/"/>
    <id>https://www.chenb.top/2019/12/03/docker-java-mysql-redis/</id>
    <published>2019-12-03T02:22:09.000Z</published>
    <updated>2022-01-20T02:23:10.008Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>项目新增了redis相关的依赖后，变的越来越庞大，部署也很麻烦了，CTO想把这些环境都打包到一个镜像中去做一个mini版本，用于测试和客户的临时试用。<br>这样做似乎违背了Docker一个容器内只有一个主进程的设计原则，但是能让初学者低门槛使用镜像，也是有些作用的。</p><h3 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h3><ul><li><code>Dockerfile</code> :镜像构建脚本，环境安装和初始化，只运行一次</li><li><code>docker-entrypoint.sh</code> :容器入口脚本，开启服务，每次启动容器都会运行</li><li><code>mysql-init.sh</code> :MySQL初始化脚本，在构建镜像时调用</li><li><code>mysql.cnf</code> <code>mysqld.cnf</code> :MySQL配置文件</li><li><code>schema.sql</code> <code>data.sql</code> :MySQL初始化sql文件，表结构和预置数据</li><li><code>Jenkinsfile</code> :持续集成脚本</li></ul><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><p>选择Ubuntu作为基础镜像安装软件非常方便，以后也好扩展<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">18.04</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apt-get install -y redis-server \</span></span><br><span class="line"><span class="bash">                       openjdk-8-jdk \</span></span><br><span class="line"><span class="bash">                       mysql-server \</span></span><br><span class="line"><span class="bash">                       mysql-client</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> miniFund/docker-entrypoint.sh /docker-entrypoint.sh</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> miniFund/mysql-init.sh /mysql-init.sh</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> miniFund/mysql.cnf /etc/mysql/conf.d/mysql.cnf</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> miniFund/mysqld.cnf /etc/mysql/mysql.conf.d/mysqld.cnf</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> src/main/resources/db/migration/V1.0__schema.sql schema.sql</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> src/main/resources/db/migration/V1.1__import_presetTable_data.sql data.sql</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> target/efi-1.0.jar app.jar</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod 777 /docker-entrypoint.sh &amp;&amp; chmod 777 /mysql-init.sh</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> [<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;/mysql-init.sh&quot;</span>]</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;/docker-entrypoint.sh&quot;</span>]</span></span><br></pre></td></tr></table></figure></p><h3 id="docker-entrypoint-sh"><a href="#docker-entrypoint-sh" class="headerlink" title="docker-entrypoint.sh"></a>docker-entrypoint.sh</h3><p>docker-entrypoint.sh是容器入口脚本，里面可以启动服务，需要注意：前几条是后台启动，最后一条要前台启动，不然容器会自动退出<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 启动mysql</span></span><br><span class="line">/etc/init.d/mysql <span class="built_in">start</span></span><br><span class="line"><span class="comment"># 启动redis</span></span><br><span class="line">redis<span class="literal">-server</span> &amp;</span><br><span class="line"><span class="comment"># 启动java</span></span><br><span class="line">java <span class="literal">-Duser</span>.timezone=Asia/Shanghai <span class="literal">-Djava</span>.security.egd=file:/dev/./urandom <span class="literal">-Dspring</span>.profiles.active=mini <span class="literal">-jar</span> /app.jar</span><br></pre></td></tr></table></figure></p><h3 id="mysql-init-sh"><a href="#mysql-init-sh" class="headerlink" title="mysql-init.sh"></a>mysql-init.sh</h3><p>mysql-init.sh是MySQL初始化脚本，包括设置root密码，权限，数据库初始化，编码设置等操作<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">## mysql初始化脚本</span></span><br><span class="line">/etc/init.d/mysql <span class="built_in">start</span></span><br><span class="line">mysql &lt;&lt;&lt;<span class="string">&quot;CREATE DATABASE IF NOT EXISTS efi CHARACTER SET &#x27;utf8mb4&#x27; COLLATE &#x27;utf8mb4_general_ci&#x27;;&quot;</span></span><br><span class="line">mysql efi &lt; schema.sql</span><br><span class="line">mysql efi &lt; data.sql</span><br><span class="line">mysql &lt;&lt;&lt;<span class="string">&quot;update mysql.user set authentication_string=PASSWORD(&#x27;123456&#x27;), plugin=&#x27;mysql_native_password&#x27;, host=&#x27;%&#x27; where user=&#x27;root&#x27;;flush privileges;&quot;</span></span><br><span class="line">/etc/init.d/mysql restart</span><br></pre></td></tr></table></figure></p><ul><li>这里的root密码设置的很简单，host也设置成了%，是为了跑压力测试软件用的，如果是给客户试用就不用开MySQL访问权限了。</li><li>主要解决问题：权限、编码、交互式脚本</li><li><code>schema.sql</code>是表结构，<code>data.sql</code>是预置数据</li></ul><h3 id="MySQL配置文件"><a href="#MySQL配置文件" class="headerlink" title="MySQL配置文件"></a>MySQL配置文件</h3><p><code>mysql.cnf</code>: /etc/mysql/conf.d/mysql.cnf<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">mysql</span>]</span><br><span class="line"><span class="comment"># 添加编码设置</span></span><br><span class="line"><span class="string">default-character-set=utf8</span></span><br></pre></td></tr></table></figure><br><code>mysqld.cnf</code>: /etc/mysql/mysql.conf.d/mysqld.cnf<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">...</span></span><br><span class="line">[<span class="string">mysqld</span>]</span><br><span class="line"><span class="comment"># 去掉host限制</span></span><br><span class="line"><span class="comment"># bind-address = 127.0.0.1</span></span><br><span class="line"><span class="comment"># 添加编码设置</span></span><br><span class="line"><span class="string">character-set-server=utf8</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure><br>编码查看语句：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%char%&#x27;</span>;</span><br></pre></td></tr></table></figure></p><h3 id="Jenkinsfile"><a href="#Jenkinsfile" class="headerlink" title="Jenkinsfile"></a>Jenkinsfile</h3><p>持续集成脚本，先构建jar包，再构建minifund镜像<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#!groovy</span><br><span class="line">pipeline &#123;</span><br><span class="line">    agent none</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&#x27;Build&#x27;</span>) &#123;</span><br><span class="line">            agent &#123;</span><br><span class="line">                docker &#123;</span><br><span class="line">                    image <span class="string">&#x27;maven:3.5.0-jdk-8-alpine&#x27;</span></span><br><span class="line">                    args <span class="string">&#x27;-v mavenRepository:/root/.m2 -e TZ=Asia/Shanghai&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh <span class="string">&#x27;mvn -B -DskipTests clean package --settings settings.xml&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;Deliver&#x27;</span>) &#123;</span><br><span class="line">            agent any</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh <span class="string">&#x27;docker build -f miniFund/Dockerfile -t minifund .&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="容器使用"><a href="#容器使用" class="headerlink" title="容器使用"></a>容器使用</h3><p>按上面的脚本构建出的minifund镜像，直接启动就有一个完整的后端环境了，使用者不用关心redis和mysql的部署，学习成本较低<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8088:8088 -p 7654:3306 --name mini minifund</span><br></pre></td></tr></table></figure></p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>构建好的镜像保证50人正常使用时要占1G内存，降低资源消耗需要长期的各种优化，当硬件环境有限制的时候，代码的问题就会显示出来了。<br>另外，大杂烩还是微服务，这是个问题</p>]]></content>
    
    <summary type="html">
    
      Docker定制镜像，包含Java、Redis、Mysql等服务
    
    </summary>
    
      <category term="技术总结" scheme="https://www.chenb.top/categories/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Java" scheme="https://www.chenb.top/tags/Java/"/>
    
      <category term="MySQL" scheme="https://www.chenb.top/tags/MySQL/"/>
    
      <category term="Docker" scheme="https://www.chenb.top/tags/Docker/"/>
    
      <category term="Redis" scheme="https://www.chenb.top/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Spring boot集成分布式锁Redisson</title>
    <link href="https://www.chenb.top/2019/10/10/spring-boot-redisson/"/>
    <id>https://www.chenb.top/2019/10/10/spring-boot-redisson/</id>
    <published>2019-10-10T05:55:53.000Z</published>
    <updated>2022-11-03T08:56:40.690Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>引入锁机制后基本满足了软件的并发需求，但是也有一些问题：</p><ol><li>系统变慢了，当用户进行一些慢速的修改操作时（导入，批量等），其他用户进行同类操作需要等待解锁，为了解决这个问题，需要结合业务实际情况细化锁的粒度</li><li>不同的服务之间不能共享锁，导致分布式的环境小概率出现并发问题</li></ol><p>之前的互斥锁：<a href="/2019/05/21/spring-boot-aop-lock">自定义注解+AOP实现互斥锁</a><br>以上情况随着业务量的增加会越来越明显，简单的互斥锁预计只能撑到年底，所以需要引入Redisson</p><h3 id="改进互斥锁方案"><a href="#改进互斥锁方案" class="headerlink" title="改进互斥锁方案"></a>改进互斥锁方案</h3><p>最初的想法是改进原先的互斥锁，细化锁的粒度，简单的说就是各人取个人的锁。那么需要自己写存入锁和取出锁的规则，还要考虑很多并发的情况，属于造轮子。<br>后来CTO建议我用Redisson，了解后发现完美解决了问题，于是放弃了这个方案。</p><h3 id="关于Redis"><a href="#关于Redis" class="headerlink" title="关于Redis"></a>关于Redis</h3><p>由于Redisson是基于Redis的，所以要先部署Redis，和其他应用一样，直接开一个Docker容器就行了，参考<a href="https://hub.docker.com/_/redis">DockerHub Redis</a></p><blockquote><p>注意：最初是在自己服务器上测试的，redis容器没加密码，结果过几天就被挖矿了，于是老老实实加上密码</p></blockquote><p>redis加密码：redis.conf中修改两行<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把host限制注释掉</span></span><br><span class="line"><span class="string">bind</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="comment"># 打开密码设置</span></span><br><span class="line"><span class="string">requirepass</span> <span class="string">XXXXXXXX</span></span><br></pre></td></tr></table></figure><br><strong><code>推荐:</code></strong> Windows上的免费Redis可视化工具  <a href="http://electronjs.org/apps/anotherredisdesktopmanager">AnotherRedisDesktopManager</a><br><strong><code>收藏:</code></strong> Windows上Redis的安装包  <a href="https://www.nuget.org/packages/Redis-64/3.0.500">Redis-64</a></p><h3 id="添加Maven依赖"><a href="#添加Maven依赖" class="headerlink" title="添加Maven依赖"></a>添加Maven依赖</h3><p>pom.xml中添加<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.11.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="添加Redisson配置类"><a href="#添加Redisson配置类" class="headerlink" title="添加Redisson配置类"></a>添加Redisson配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> chenbin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedissonConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;redisson.address&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedissonClient <span class="title">getRedisson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Config config = <span class="keyword">new</span> Config();</span><br><span class="line">        config.useSingleServer().setAddress(address);</span><br><span class="line">        config.useSingleServer().setPassword(<span class="string">&quot;XXXXXXXX&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于每个环境redis地址不同，把地址放到对应的配置文件中了<br><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">redisson.address</span>=<span class="string">redis://127.0.0.1:6379</span></span><br></pre></td></tr></table></figure></p><h3 id="新版的切面代码"><a href="#新版的切面代码" class="headerlink" title="新版的切面代码"></a>新版的切面代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 同步锁 AOP</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> chenbin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Profile(NOT_DEVELOPMENT)</span></span><br><span class="line"><span class="meta">@Scope</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.profiles.active&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String active;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Service层切点     用于记录错误日志</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(com.hongfund.efi.service.lock.ServiceLock)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lockAspect</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;lockAspect()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();</span><br><span class="line">        String accountBookId = request.getHeader(<span class="string">&quot;accountBookId&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(accountBookId)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ServiceException(<span class="string">&quot;账套校验失败!&quot;</span>, ErrorCode.BAD_REQUEST);</span><br><span class="line">        &#125;</span><br><span class="line">        RLock lock = redissonClient.getLock(active + <span class="string">&quot;_&quot;</span> + accountBookId);</span><br><span class="line">        <span class="keyword">boolean</span> res = lock.tryLock(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">        Object obj;</span><br><span class="line">        <span class="keyword">if</span> (res) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                obj = joinPoint.proceed();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> obj;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ServiceException(<span class="string">&quot;其他用户正在操作，请等待!&quot;</span>, ErrorCode.BAD_REQUEST);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里根据业务情况把锁细化到账套级别</li><li>为防止本地环境报错，设置为非测试环境过滤</li><li>更新后暂时没问题，还需要测试性能和参数调优后再决定是否上线</li></ul><p><strong><code>参考:</code></strong>  <a href="https://github.com/redisson/redisson/wiki">Redisson官方文档</a></p>]]></content>
    
    <summary type="html">
    
      在原有互斥锁基础上改进为细粒度锁
    
    </summary>
    
      <category term="技术总结" scheme="https://www.chenb.top/categories/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Java" scheme="https://www.chenb.top/tags/Java/"/>
    
      <category term="Spring boot" scheme="https://www.chenb.top/tags/Spring-boot/"/>
    
      <category term="Redis" scheme="https://www.chenb.top/tags/Redis/"/>
    
      <category term="Redisson" scheme="https://www.chenb.top/tags/Redisson/"/>
    
  </entry>
  
  <entry>
    <title>Node语音识别</title>
    <link href="https://www.chenb.top/2019/06/26/node-ffmpeg/"/>
    <id>https://www.chenb.top/2019/06/26/node-ffmpeg/</id>
    <published>2019-06-26T05:47:02.000Z</published>
    <updated>2022-11-03T08:56:40.690Z</updated>
    
    <content type="html"><![CDATA[<h2 id="语音识别（支持pcm和m4a）"><a href="#语音识别（支持pcm和m4a）" class="headerlink" title="语音识别（支持pcm和m4a）"></a>语音识别（支持pcm和m4a）</h2><p>测试： <a href="http://web.chenb.top">http://web.chenb.top</a><br>Github项目： <a href="https://github.com/chenbin-353549444/node-ffmpeg">https://github.com/chenbin-353549444/node-ffmpeg</a></p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>使用百度的语音识别接口，用FFMPEG转音频文件</p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>修改server.js的<code>API Key</code>和<code>Secret Key</code><br>在安装好Docker的机器上运行<code>sh run.sh</code>，如果有Jenkins可以直接新建管道构建<br>完成后访问测试页面(<a href="http://127.0.0.1:80/index.htm">http://127.0.0.1:80/index.htm</a>)<br><img src="/images/view.jpg" alt=""></p><h3 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h3><p>server.js<br><figure class="highlight javascript"><figcaption><span>1.8</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> ffmpeg = <span class="built_in">require</span>(<span class="string">&#x27;fluent-ffmpeg&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line"><span class="keyword">let</span> AipSpeech = <span class="built_in">require</span>(<span class="string">&quot;baidu-aip-sdk&quot;</span>).speech;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 百度语音应用后台中的`API Key`和`Secret Key`</span></span><br><span class="line"><span class="keyword">let</span> client = <span class="keyword">new</span> AipSpeech(<span class="number">0</span>, <span class="string">&#x27;API Key&#x27;</span>, <span class="string">&#x27;Secret Key&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> multer  = <span class="built_in">require</span>(<span class="string">&#x27;multer&#x27;</span>);</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">&#x27;/public&#x27;</span>, express.static(<span class="string">&#x27;public&#x27;</span>));</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line">app.use(multer(&#123; <span class="attr">dest</span>: <span class="string">&#x27;/tmp/&#x27;</span>&#125;).array(<span class="string">&#x27;buf&#x27;</span>));</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.sendFile( __dirname + <span class="string">&quot;/&quot;</span> + <span class="string">&quot;index.htm&quot;</span> );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&#x27;/pcm&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>,&#123;<span class="string">&#x27;Content-Type&#x27;</span>:<span class="string">&#x27;text/html;charset=utf-8&#x27;</span>&#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(req.files[<span class="number">0</span>]);  <span class="comment">// 上传的文件信息</span></span><br><span class="line">    fs.readFile( req.files[<span class="number">0</span>].path, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> voiceBase64 = <span class="keyword">new</span> Buffer(data);</span><br><span class="line">        client.recognize(voiceBase64, <span class="string">&#x27;pcm&#x27;</span>, <span class="number">16000</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">            res.end(<span class="built_in">JSON</span>.stringify(result));</span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">            res.end(err);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&#x27;/m4a&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>,&#123;<span class="string">&#x27;Content-Type&#x27;</span>:<span class="string">&#x27;text/html;charset=utf-8&#x27;</span>&#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(req);  <span class="comment">// 上传的文件信息</span></span><br><span class="line">    <span class="keyword">let</span> voiceBase64 = <span class="keyword">new</span> Buffer(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> command = ffmpeg(req.files[<span class="number">0</span>].path)</span><br><span class="line">        .noVideo()</span><br><span class="line">        .inputFormat(<span class="string">&#x27;m4a&#x27;</span>)</span><br><span class="line">        .audioCodec(<span class="string">&#x27;pcm_s16le&#x27;</span>)</span><br><span class="line">        .audioBitrate(<span class="number">16</span>)</span><br><span class="line">        .audioFrequency(<span class="number">16000</span>)</span><br><span class="line">        .audioChannels(<span class="number">1</span>)</span><br><span class="line">        .format(<span class="string">&#x27;s16le&#x27;</span>)</span><br><span class="line">        .on(<span class="string">&#x27;error&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;An error occurred: &#x27;</span> + err.message);</span><br><span class="line">        &#125;)</span><br><span class="line">        .on(<span class="string">&#x27;end&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;success&#x27;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="keyword">let</span> ffstream = command.pipe();</span><br><span class="line">    ffstream.on(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">        voiceBase64 = Buffer.concat([voiceBase64, <span class="keyword">new</span> Buffer(chunk)]);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;ffmpeg just wrote &#x27;</span> + chunk.length + <span class="string">&#x27; bytes&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    ffstream.on(<span class="string">&#x27;end&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;data &#x27;</span> + voiceBase64.length + <span class="string">&#x27; bytes&#x27;</span>);</span><br><span class="line">        client.recognize(voiceBase64, <span class="string">&#x27;pcm&#x27;</span>, <span class="number">16000</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">            res.end(<span class="built_in">JSON</span>.stringify(result));</span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">            res.end(err);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> server = app.listen(<span class="number">80</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> host = server.address().address;</span><br><span class="line">    <span class="keyword">var</span> port = server.address().port;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;应用实例，访问地址为 http://%s:%s&quot;</span>, host, port)</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>百度接口文档:(<a href="http://ai.baidu.com/docs#/ASR-Online-Node-SDK/8b3186c3">http://ai.baidu.com/docs#/ASR-Online-Node-SDK/8b3186c3</a>)<br>node-fluent-ffmpeg:(<a href="https://github.com/fluent-ffmpeg/node-fluent-ffmpeg#creating-an-ffmpeg-command">https://github.com/fluent-ffmpeg/node-fluent-ffmpeg#creating-an-ffmpeg-command</a>)<br>FFMPEG:(<a href="http://www.ffmpeg.org">http://www.ffmpeg.org</a>)</p>]]></content>
    
    <summary type="html">
    
      Node语音识别，目前支持m4a、pcm格式，使用百度的语音识别接口，用FFMPEG转音频文件
    
    </summary>
    
      <category term="技术总结" scheme="https://www.chenb.top/categories/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Node" scheme="https://www.chenb.top/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Spring boot 自定义注解+AOP实现互斥锁</title>
    <link href="https://www.chenb.top/2019/05/21/spring-boot-aop-lock/"/>
    <id>https://www.chenb.top/2019/05/21/spring-boot-aop-lock/</id>
    <published>2019-05-21T07:48:36.000Z</published>
    <updated>2022-01-20T02:23:10.008Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>随着业务量的不断增长，并发问题时有出现，要解决这些问题需要引入锁机制</p><h3 id="同步关键字解决方案"><a href="#同步关键字解决方案" class="headerlink" title="同步关键字解决方案"></a>同步关键字解决方案</h3><p>最初在方法上加同步关键字<code>synchronized</code>，这种方式只能限制同一个类中的方法，不同类中的方法仍然可以并发<br>那么可以使用同步代码块解决该问题，定义一个公共的锁，然后在需要同步的方法开始和结束加上同步代码块，这样就能解决问题了，但是这种写法很繁琐，需要每个方法头尾去加代码，由此想到了AOP和自定义注解</p><h3 id="定义锁注解"><a href="#定义锁注解" class="headerlink" title="定义锁注解"></a>定义锁注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.PARAMETER, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ServiceLock &#123;</span><br><span class="line">    <span class="function">String <span class="title">description</span><span class="params">()</span> <span class="keyword">default</span> &quot;service lock&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AOP切面"><a href="#AOP切面" class="headerlink" title="AOP切面"></a>AOP切面</h3><p>在Service层定义切面，方法执行前后分别加锁和解锁，使用时需要同步的方法加上<code>@ServiceLock</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 同步锁 AOP</span></span><br><span class="line"><span class="comment"> * https://docs.spring.io/spring/docs/4.3.14.RELEASE/spring-framework-reference/htmlsingle/#transaction-declarative-annotations</span></span><br><span class="line"><span class="comment"> * https://docs.spring.io/spring/docs/4.3.14.RELEASE/javadoc-api/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockAspect</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 互斥锁 参数默认false，不公平锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Lock lock = <span class="keyword">new</span> ReentrantLock(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Service层切点     用于记录错误日志</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(com.xxx.xxx.service.lock.ServiceLock)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lockAspect</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;lockAspect()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        Object obj;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            obj = joinPoint.proceed();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      Spring boot 自定义注解+AOP实现互斥锁
    
    </summary>
    
      <category term="技术总结" scheme="https://www.chenb.top/categories/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Java" scheme="https://www.chenb.top/tags/Java/"/>
    
      <category term="Spring boot" scheme="https://www.chenb.top/tags/Spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>Java实现数学公式计算</title>
    <link href="https://www.chenb.top/2019/05/20/java-rpn/"/>
    <id>https://www.chenb.top/2019/05/20/java-rpn/</id>
    <published>2019-05-20T09:48:52.000Z</published>
    <updated>2022-01-20T02:23:10.008Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>最近国家税务政策变动，财务报表需要更新公式和格式了，这类更新经常会发生，为了以后维护方便，想到了解析字符串格式的数学公式。查阅了一下资料，可以用逆波兰表达式实现。</p><h3 id="中缀表达式转后缀表达式"><a href="#中缀表达式转后缀表达式" class="headerlink" title="中缀表达式转后缀表达式"></a>中缀表达式转后缀表达式</h3><p>中缀表达式：平常见到的表达式，如<code>3+(5*(6-1/2))</code><br>后缀表达式：即逆波兰表达式，指的是不包含括号，运算符放在两个运算对象的后面，所有的计算按运算符出现的顺序，严格从左向右进行（不再考虑运算符的优先规则），既然没了运算符的优先规则，那么计算机解析起来自然容易的多。上面的中缀表达式对应的后缀表达式<code>[3, 5, 6, 1, 2, /, -, *, +]</code><br>解析公式需要先将通俗的中缀表达式转化成后缀表达式，具体算法如下：</p><ul><li>首先设置运算符的优先级（这样设置也是为了简化程序）： <ul><li><code>null</code> 栈顶若为空，假设优先级为0</li><li><code>左括号</code> 优先级设为1</li><li><code>+-</code> 优先级设为2</li><li><code>*/</code> 优先级设为3</li></ul></li><li>从左向右遍历中缀表达式<ul><li>遇到数字直接输出</li><li>遇到符号 <ul><li>遇到左括号，直接压栈</li><li>遇到右括号，弹栈输出直到弹出左括号（左括号不输出）</li><li>遇到运算符，比较栈顶符号，若该运算符优先级大于栈顶，直接压栈；若小于栈顶，弹栈输出直到大于栈顶，然后将改运算符压栈。</li></ul></li></ul></li><li>最后将符合栈弹栈并输出</li></ul><h3 id="后缀表达式计算结果"><a href="#后缀表达式计算结果" class="headerlink" title="后缀表达式计算结果"></a>后缀表达式计算结果</h3><ul><li>从左往右遍历</li><li>遇到数字直接放入容器</li><li>遇到运算符，将最后两个数字取出，进行该运算，将结果再放入容器</li><li>遍历结束后，容器中的数字即为运算结果</li></ul><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><p>以上算法不难实现，下面是我修改后的工具类，可以计算浮点数的公式，精确到2位有效数字<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.hongfund.efi.utils.RegExpUtil.FLOAT_NUMBER;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.math.BigDecimal.ZERO;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.math.RoundingMode.HALF_UP;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数学公式计算</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> chenbin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RpnUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; test = Arrays.asList(<span class="string">&quot;3 + ( 5 * ( 6 - 1 / 2 ) )&quot;</span>.split(<span class="string">&quot; &quot;</span>));</span><br><span class="line">        System.out.println(getRpn(test));</span><br><span class="line">        System.out.println(calculate(test));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算指定公式的数值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">calculate</span><span class="params">(List&lt;String&gt; formulaList)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; rpn = getRpn(formulaList);</span><br><span class="line">        <span class="keyword">return</span> calculateRpn(rpn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中序转后序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getRpn</span><span class="params">(List&lt;String&gt; formulaList)</span> </span>&#123;</span><br><span class="line">        Stack&lt;String&gt; operators=<span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        List&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String formula : formulaList) &#123;</span><br><span class="line">            <span class="keyword">if</span> (formula.matches(FLOAT_NUMBER)) &#123;</span><br><span class="line">                result.add(formula);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (formula.equals(<span class="string">&quot;(&quot;</span>)) &#123;</span><br><span class="line">                operators.push(formula);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (formula.equals(<span class="string">&quot;)&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">while</span> (!operators.peek().equals(<span class="string">&quot;(&quot;</span>)) &#123;</span><br><span class="line">                    result.add(operators.pop());</span><br><span class="line">                &#125;</span><br><span class="line">                operators.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (operators.size() != <span class="number">0</span> &amp;&amp; getLevel(operators.peek()) &gt;= getLevel(formula)) &#123;</span><br><span class="line">                    result.add(operators.pop());</span><br><span class="line">                &#125;</span><br><span class="line">                operators.push(formula);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (operators.size() != <span class="number">0</span>) &#123;</span><br><span class="line">            result.add(operators.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 逆序计算结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">calculateRpn</span><span class="params">(List&lt;String&gt; formulaList)</span> </span>&#123;</span><br><span class="line">        Stack&lt;BigDecimal&gt; s=<span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String formula : formulaList) &#123;</span><br><span class="line">            <span class="keyword">if</span> (formula.matches(FLOAT_NUMBER)) &#123;</span><br><span class="line">                s.push(BigDecimalUtils.getDecimalValue(formula));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                BigDecimal b = s.pop();</span><br><span class="line">                BigDecimal a = s.pop();</span><br><span class="line">                BigDecimal temp = ZERO;</span><br><span class="line">                <span class="keyword">switch</span> (formula) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;+&quot;</span> : temp = a.add(b);<span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;-&quot;</span> : temp = a.subtract(b);<span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;*&quot;</span> : temp = a.multiply(b);<span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;/&quot;</span> : temp = a.divide(b, <span class="number">2</span>, HALF_UP);<span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;max&quot;</span> : temp = a.max(b);<span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                s.push(temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> FormatUtils.DECIMAL_FORMAT_2.format(s.pop());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 运算符优先级</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getLevel</span><span class="params">(String operator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(operator)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">switch</span> (operator) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;(&quot;</span> : <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;+&quot;</span> :</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;-&quot;</span> : <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;*&quot;</span> :</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;/&quot;</span> :</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;max&quot;</span> : <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">default</span> : <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="判断浮点数的正则"><a href="#判断浮点数的正则" class="headerlink" title="判断浮点数的正则"></a>判断浮点数的正则</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 正则表达式工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegExpUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 匹配浮点数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FLOAT_NUMBER = <span class="string">&quot;^(-?\\d+)(\\.\\d+)?$&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Java实现数学公式计算，支持浮点数，使用逆波兰表达式计算
    
    </summary>
    
      <category term="技术总结" scheme="https://www.chenb.top/categories/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Java" scheme="https://www.chenb.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Spring Data JPA解决批量修改与唯一索引冲突的问题</title>
    <link href="https://www.chenb.top/2019/04/23/spring-data-jpa-multi-modify-unique-index/"/>
    <id>https://www.chenb.top/2019/04/23/spring-data-jpa-multi-modify-unique-index/</id>
    <published>2019-04-23T09:17:30.000Z</published>
    <updated>2022-01-20T02:23:10.007Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>最近发现数据库凭证表中有脏数据（数量不多，直接手动修复了），于是想到了加唯一索引，加上之后发现有个批量修改的地方不能用了，报索引冲突问题，只能先撤回想解决办法</p><h3 id="索引规约"><a href="#索引规约" class="headerlink" title="索引规约"></a>索引规约</h3><p><code>强制</code> 业务上具有唯一特性的字段，即使是多个字段的组合，也必须建成唯一索引。<br>说明：不要以为唯一索引影响了 insert 速度，这个速度损耗可以忽略，但提高查找速度是明显的；另外，即使在应用层做了非常完善的校验控制，只要没有唯一索引，根据墨菲定律，必然有脏数据产生。</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>发现JPA中的save方法不会发送sql更新语句，要等事务提交或者有新的查询语句需要用到之前修改的数据时才会更新到数据库，于是查阅资料和源码后找到了flush方法。详细解决见代码</p><h3 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*凭证表*/</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> voucher;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> voucher(</span><br><span class="line">id <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">account_book_id <span class="type">bigint</span>,</span><br><span class="line">accessory_no <span class="type">int</span>,</span><br><span class="line">audit_date <span class="type">date</span>,</span><br><span class="line">audit_person <span class="type">varchar</span>(<span class="number">32</span>),</span><br><span class="line">cash_flow_flag <span class="type">int</span>,</span><br><span class="line">category <span class="type">int</span>,</span><br><span class="line">dftotal <span class="type">decimal</span>(<span class="number">14</span>,<span class="number">2</span>),</span><br><span class="line">isassigned <span class="type">int</span>,</span><br><span class="line">jftotal <span class="type">decimal</span>(<span class="number">14</span>,<span class="number">2</span>),</span><br><span class="line">operator <span class="type">int</span>,</span><br><span class="line"><span class="keyword">period</span> <span class="type">varchar</span>(<span class="number">64</span>),</span><br><span class="line">remark <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">state <span class="type">int</span>,</span><br><span class="line">voucher_date <span class="type">date</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">voucher_no <span class="type">varchar</span>(<span class="number">64</span>),</span><br><span class="line">written_date <span class="type">TIMESTAMP</span> <span class="keyword">default</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">written_person <span class="type">varchar</span>(<span class="number">32</span>),</span><br><span class="line"><span class="keyword">primary</span> <span class="keyword">key</span> (id)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> index UK_voucher <span class="keyword">on</span> voucher(account_book_id, <span class="keyword">period</span>, voucher_no);</span><br></pre></td></tr></table></figure><h3 id="原来的逻辑"><a href="#原来的逻辑" class="headerlink" title="原来的逻辑"></a>原来的逻辑</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String voucherNo = voucherDto.voucherNo;</span><br><span class="line"><span class="comment">// 之后的每张凭证号加一，如果下一张凭证号不重复了就跳出</span></span><br><span class="line"><span class="keyword">for</span> (Voucher v : vouchers) &#123;</span><br><span class="line">    <span class="keyword">if</span> (v.voucherNo.equals(voucherNo)) &#123;</span><br><span class="line">        voucherNo = getNextNo(voucherNo, VOUCHER_NO_LENGTH);</span><br><span class="line">        v.voucherNo = voucherNo;</span><br><span class="line">        voucherDao.save(v);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改后的逻辑"><a href="#修改后的逻辑" class="headerlink" title="修改后的逻辑"></a>修改后的逻辑</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">String voucherNo = voucherDto.voucherNo;</span><br><span class="line">List&lt;Voucher&gt; needToSaveVouchers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">// 之后的每张凭证号加一，如果下一张凭证号不重复了就跳出</span></span><br><span class="line"><span class="keyword">for</span> (Voucher v : vouchers) &#123;</span><br><span class="line">    <span class="keyword">if</span> (v.voucherNo.equals(voucherNo)) &#123;</span><br><span class="line">        voucherNo = getNextNo(voucherNo, VOUCHER_NO_LENGTH);</span><br><span class="line">        needToSaveVouchers.add(<span class="number">0</span>, v);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 从后往前改，防止唯一索引重复</span></span><br><span class="line"><span class="keyword">for</span> (Voucher v : needToSaveVouchers) &#123;</span><br><span class="line">    v.voucherNo = getNextNo(v.voucherNo, VOUCHER_NO_LENGTH);</span><br><span class="line">    voucherDao.saveAndFlush(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>flush,saveAndFlush会刷新当前session中所有持久化对象的状态到数据库，所以在调用时要考虑别的持久化对象的状态</li><li>保存顺序不是按照list的顺序，所以要手动控制</li><li>flush,saveAndFlush需要dao继承<code>JpaRepository</code>才能使用</li></ul>]]></content>
    
    <summary type="html">
    
      Spring Data JPA解决批量修改与唯一索引冲突的问题
    
    </summary>
    
      <category term="技术总结" scheme="https://www.chenb.top/categories/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="MySQL" scheme="https://www.chenb.top/tags/MySQL/"/>
    
      <category term="Spring Data JPA" scheme="https://www.chenb.top/tags/Spring-Data-JPA/"/>
    
  </entry>
  
  <entry>
    <title>Git提交规范，GitHub表情规范指南</title>
    <link href="https://www.chenb.top/2019/04/11/git-commit-emoji/"/>
    <id>https://www.chenb.top/2019/04/11/git-commit-emoji/</id>
    <published>2019-04-11T08:42:33.000Z</published>
    <updated>2022-01-20T02:23:10.007Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>使用git很久了一直都随便写commit信息，导致查看历史时比较混乱，所以搜集了网上的提交规范，摘录到这里备用</p><h3 id="提交规范"><a href="#提交规范" class="headerlink" title="提交规范"></a>提交规范</h3><p>格式：括号中部分的可以省略<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>(<span class="tag">&lt;<span class="name">scope</span>&gt;</span>): <span class="tag">&lt;<span class="name">subject</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">BLANK</span> <span class="attr">LINE</span>&gt;</span></span><br><span class="line">(<span class="tag">&lt;<span class="name">body</span>&gt;</span>)</span><br><span class="line"><span class="tag">&lt;<span class="name">BLANK</span> <span class="attr">LINE</span>&gt;</span></span><br><span class="line">(<span class="tag">&lt;<span class="name">footer</span>&gt;</span>)</span><br></pre></td></tr></table></figure></p><ul><li>header: 只有一行，包括三个字段：type、scope、subject<ul><li>type: 提交的类别</li><li>scope: 影响的范围，比如数据层、控制层、视图层等等（可空）</li><li>subject: 描述</li></ul></li><li>body: 提交的类别（可空）</li><li>footer: 不兼容变动、Close Issue、Revert等</li></ul><p>type的类型：</p><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>feat</td><td>新功能（feature）</td></tr><tr><td>fix</td><td>修补bug</td></tr><tr><td>docs</td><td>文档（documentation）</td></tr><tr><td>style</td><td>格式（不影响代码运行的变动）</td></tr><tr><td>refactor</td><td>重构（即不是新增功能，也不是修改bug的代码变动）</td></tr><tr><td>test</td><td>增加测试</td></tr><tr><td>chore</td><td>构建过程或辅助工具的变动</td></tr></tbody></table><h3 id="GitHub表情指南"><a href="#GitHub表情指南" class="headerlink" title="GitHub表情指南"></a>GitHub表情指南</h3><table><thead><tr><th>emoji</th><th>emoji 代码</th><th>commit 说明</th></tr></thead><tbody><tr><td>🎉 (庆祝)</td><td>:tada:</td><td>初次提交</td></tr><tr><td>✨ (火花)</td><td>:sparkles:</td><td>引入新功能</td></tr><tr><td>🔖 (书签)</td><td>:bookmark:</td><td>发行/版本标签</td></tr><tr><td>🐛 (bug)</td><td>:bug:</td><td>修复 bug</td></tr><tr><td>🚑 (急救车)</td><td>:ambulance:</td><td>重要补丁</td></tr><tr><td>🌐 (地球)</td><td>:globe_with_meridians:</td><td>国际化与本地化</td></tr><tr><td>💄 (口红)</td><td>:lipstick:</td><td>更新 UI 和样式文件</td></tr><tr><td>🎬 (场记板)</td><td>:clapper:</td><td>更新演示/示例</td></tr><tr><td>🚨 (警车灯)</td><td>:rotating_light:</td><td>移除 linter 警告</td></tr><tr><td>🔧 (扳手)</td><td>:wrench:</td><td>修改配置文件</td></tr><tr><td>➕ (加号)</td><td>:heavy_plus_sign:</td><td>增加一个依赖</td></tr><tr><td>➖ (减号)</td><td>:heavy_minus_sign:</td><td>减少一个依赖</td></tr><tr><td>⬆️ (上升箭头)</td><td>:arrow_up:</td><td>升级依赖</td></tr><tr><td>⬇️ (下降箭头)</td><td>:arrow_down:</td><td>降级依赖</td></tr><tr><td>⚡️ (闪电)</td><td>:zap:</td><td>提升性能</td></tr><tr><td>🐎 (赛马)</td><td>:racehorse:</td><td>提升性能</td></tr><tr><td>📈 (上升趋势图)</td><td>:chart_with_upwards_trend:</td><td>添加分析或跟踪代码</td></tr><tr><td>🚀 (火箭)</td><td>:rocket:</td><td>部署功能</td></tr><tr><td>✅ (白色复选框)</td><td>:white_check_mark:</td><td>增加测试</td></tr><tr><td>📝 (备忘录)</td><td>:memo:</td><td>撰写文档</td></tr><tr><td>🔨 (锤子)</td><td>:hammer:</td><td>重大重构</td></tr><tr><td>🎨 (调色板)</td><td>:art:</td><td>改进代码结构/代码格式</td></tr><tr><td>🔥 (火焰)</td><td>:fire:</td><td>移除代码或文件</td></tr><tr><td>✏️ (铅笔)</td><td>:pencil2:</td><td>修复 typo</td></tr><tr><td>🚧 (施工)</td><td>:construction:</td><td>工作进行中</td></tr><tr><td>👷 (工人)</td><td>:construction_worker:</td><td>添加 CI 构建系统</td></tr><tr><td>💚 (绿心)</td><td>:green_heart:</td><td>修复 CI 构建问题</td></tr><tr><td>🔒 (锁)</td><td>:lock:</td><td>修复安全问题</td></tr><tr><td>🐳 (鲸鱼)</td><td>:whale:</td><td>Docker 相关工作</td></tr><tr><td>🍎 (苹果)</td><td>:apple:</td><td>修复 macOS 下的问题</td></tr><tr><td>🐧 (企鹅)</td><td>:penguin:</td><td>修复 Linux 下的问题</td></tr><tr><td>🏁 (旗帜)</td><td>:checked_flag:</td><td>修复 Windows 下的问题</td></tr></tbody></table><p>原项目链接：<a href="https://github.com/liuchengxu/git-commit-emoji-cn">git commit message emoji 使用指南</a><br>参考：<a href="https://gitmoji.carloscuesta.me/">gitmoji</a></p>]]></content>
    
    <summary type="html">
    
      git提交规范，GitHub表情规范指南
    
    </summary>
    
      <category term="技术总结" scheme="https://www.chenb.top/categories/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Git" scheme="https://www.chenb.top/tags/Git/"/>
    
  </entry>
  
</feed>
